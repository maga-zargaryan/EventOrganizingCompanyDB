-- Generated by Oracle SQL Developer Data Modeler 19.2.0.182.1216
--   at:        2019-12-01 12:24:11 AMT
--   site:      Oracle Database 11g
--   type:      Oracle Database 11g



CREATE TABLE branch (
    street_address   VARCHAR2(25 CHAR) NOT NULL,
    postal_code      VARCHAR2(12 CHAR) NOT NULL,
    city             VARCHAR2(30 CHAR) NOT NULL,
    branch_id        NUMBER NOT NULL,
    region_id        NUMBER NOT NULL
);

ALTER TABLE branch ADD CONSTRAINT branch_pk PRIMARY KEY ( branch_id );

CREATE TABLE branch_department (
    department_id   NUMBER NOT NULL,
    branch_id       NUMBER NOT NULL
);

ALTER TABLE branch_department ADD CONSTRAINT branch_department_pk PRIMARY KEY ( department_id,
                                                                                branch_id );

CREATE TABLE customer (
    customer_id    NUMBER NOT NULL,
    phone_number   NUMBER NOT NULL,
    email          VARCHAR2(25 CHAR)
);

ALTER TABLE customer ADD CONSTRAINT customer_pk PRIMARY KEY ( customer_id );

CREATE TABLE customer_company (
    company_name   VARCHAR2(50 CHAR) NOT NULL,
    customer_id    NUMBER NOT NULL
);

CREATE UNIQUE INDEX customer_company__idx ON
    customer_company (
        customer_id
    ASC );

ALTER TABLE customer_company ADD CONSTRAINT customer_company_pk PRIMARY KEY ( customer_id );

CREATE TABLE customer_individual (
    first_name    VARCHAR2(30 CHAR) NOT NULL,
    last_name     VARCHAR2(30 CHAR) NOT NULL,
    customer_id   NUMBER NOT NULL
);

CREATE UNIQUE INDEX customer_individual__idx ON
    customer_individual (
        customer_id
    ASC );

ALTER TABLE customer_individual ADD CONSTRAINT customer_individual_pk PRIMARY KEY ( customer_id );

CREATE TABLE department (
    department_id     NUMBER NOT NULL,
    department_name   VARCHAR2(30 CHAR) NOT NULL
);

ALTER TABLE department ADD CONSTRAINT department_pk PRIMARY KEY ( department_id );

CREATE TABLE dependent (
    dependent_id          NUMBER NOT NULL,
    dependent_name        VARCHAR2(25 CHAR) NOT NULL,
    dependent_last_name   VARCHAR2(25 CHAR),
    relationship          VARCHAR2(12 CHAR),
    employee_id           NUMBER NOT NULL
);

ALTER TABLE dependent ADD CONSTRAINT dependent_pk PRIMARY KEY ( employee_id,
                                                                dependent_id );

CREATE TABLE employee (
    employee_id     NUMBER NOT NULL,
    department_id   NUMBER NOT NULL,
    branch_id       NUMBER NOT NULL,
    ssn             VARCHAR2(50 CHAR) NOT NULL,
    first_name      VARCHAR2(25 CHAR) NOT NULL,
    last_name       VARCHAR2(25) NOT NULL,
    date_of_birth   DATE NOT NULL,
    email           VARCHAR2(50) NOT NULL,
    phone           NUMBER(15) NOT NULL,
    salary          NUMBER(12, 2) NOT NULL,
    photo           BLOB,
    position_id     NUMBER NOT NULL
);

ALTER TABLE employee ADD CONSTRAINT employee_pk PRIMARY KEY ( employee_id );

CREATE TABLE employee_training (
    training_id   NUMBER NOT NULL,
    employee_id   NUMBER NOT NULL
);

ALTER TABLE employee_training ADD CONSTRAINT employee_training_pk PRIMARY KEY ( training_id,
                                                                                employee_id );

CREATE TABLE entertainment_service (
    service_id    NUMBER NOT NULL,
    description   VARCHAR2(500 CHAR),
    performer     VARCHAR2(50 CHAR)
);

ALTER TABLE entertainment_service ADD CONSTRAINT entertainment_service_pk PRIMARY KEY ( service_id );

CREATE TABLE equipment (
    equipment_id        NUMBER NOT NULL,
    equipment_type_id   NUMBER NOT NULL,
    equipment_name      VARCHAR2(25 CHAR) NOT NULL,
    equipment_price     NUMBER NOT NULL
);

ALTER TABLE equipment ADD CONSTRAINT equipment_pk PRIMARY KEY ( equipment_id );

CREATE TABLE equipment_inventory (
    inventory_id   NUMBER NOT NULL,
    equipment_id   NUMBER NOT NULL,
    count          INTEGER NOT NULL
);

CREATE TABLE equipment_type (
    equipment_type_id     NUMBER NOT NULL,
    equipment_type_name   VARCHAR2(25 CHAR) NOT NULL
);

ALTER TABLE equipment_type ADD CONSTRAINT equipment_type_pk PRIMARY KEY ( equipment_type_id );

CREATE TABLE event (
    event_id          NUMBER NOT NULL,
    start_date_time   DATE NOT NULL,
    end_date_time     DATE NOT NULL,
    description       VARCHAR2(600 CHAR),
    event_type_id     NUMBER NOT NULL,
    manager_id        NUMBER NOT NULL
);

ALTER TABLE event ADD CONSTRAINT event_pk PRIMARY KEY ( event_id );

CREATE TABLE event_employee (
    event_id      NUMBER NOT NULL,
    employee_id   NUMBER NOT NULL
);

ALTER TABLE event_employee ADD CONSTRAINT event_employee_pk PRIMARY KEY ( event_id,
                                                                          employee_id );

CREATE TABLE event_order (
    event_order_id    NUMBER NOT NULL,
    payment_type_id   NUMBER NOT NULL,
    order_date        DATE NOT NULL,
    planned_price     NUMBER NOT NULL,
    actual_price      NUMBER NOT NULL,
    event_event_id    NUMBER NOT NULL,
    customer_id       NUMBER NOT NULL,
    billing_address   VARCHAR2(80 CHAR) NOT NULL
);

ALTER TABLE event_order ADD CONSTRAINT event_order_pk PRIMARY KEY ( event_order_id );

CREATE TABLE event_service_record (
    event_id           NUMBER NOT NULL,
    partner_srv_id     NUMBER NOT NULL,
    record_id          NUMBER NOT NULL,
    cost               NUMBER(12, 2) NOT NULL,
    contact_name       VARCHAR2(30 CHAR),
    contact_number     NUMBER(10),
    staff_size         NUMBER(6),
    additional_notes   VARCHAR2(300 CHAR)
);

ALTER TABLE event_service_record ADD CONSTRAINT event_service_record_pk PRIMARY KEY ( event_id,
                                                                                      partner_srv_id );

CREATE TABLE event_type (
    event_type_id     NUMBER NOT NULL,
    event_type_name   VARCHAR2(25 CHAR) NOT NULL
);

ALTER TABLE event_type ADD CONSTRAINT event_type_pk PRIMARY KEY ( event_type_id );

CREATE TABLE event_volunteer (
    event_id       NUMBER NOT NULL,
    volunteer_id   NUMBER NOT NULL
);

ALTER TABLE event_volunteer ADD CONSTRAINT event_volunteer_pk PRIMARY KEY ( event_id,
                                                                            volunteer_id );

CREATE TABLE food_service (
    service_id            NUMBER NOT NULL,
    vegetarian_provided   CHAR(1) NOT NULL,
    vegan_provided        CHAR(1) NOT NULL
);

ALTER TABLE food_service ADD CONSTRAINT food_service_pk PRIMARY KEY ( service_id );

CREATE TABLE generic_service (
    service_id    NUMBER NOT NULL,
    description   VARCHAR2(200 CHAR) NOT NULL
);

ALTER TABLE generic_service ADD CONSTRAINT generic_service_pk PRIMARY KEY ( service_id );

CREATE TABLE guest (
    guest_id           NUMBER NOT NULL,
    first_name         VARCHAR2(25 CHAR) NOT NULL,
    last_name          VARCHAR2(25 CHAR) NOT NULL,
    phone_number       NUMBER,
    email              VARCHAR2(25 CHAR),
    guest_address_id   NUMBER,
    event_id           NUMBER NOT NULL
);

ALTER TABLE guest ADD CONSTRAINT guest_pk PRIMARY KEY ( guest_id );

CREATE TABLE guest_address (
    guest_address_id   NUMBER NOT NULL,
    city               VARCHAR2(25 CHAR),
    street             VARCHAR2(25 CHAR),
    building           NUMBER,
    apartment          NUMBER
);

ALTER TABLE guest_address ADD CONSTRAINT guest_address_pk PRIMARY KEY ( guest_address_id );

CREATE TABLE inventory (
    inventory_id        NUMBER NOT NULL,
    inventory_address   VARCHAR2(100 CHAR) NOT NULL
);

ALTER TABLE inventory ADD CONSTRAINT inventory_pk PRIMARY KEY ( inventory_id );

CREATE TABLE music_service (
    service_id            NUMBER NOT NULL,
    live_music_provided   CHAR(1),
    equipment_included    CHAR(1)
);

ALTER TABLE music_service ADD CONSTRAINT music_service_pk PRIMARY KEY ( service_id );

CREATE TABLE partner (
    partner_id   NUMBER NOT NULL,
    name         VARCHAR2(100 CHAR) NOT NULL,
    phone        NUMBER NOT NULL,
    email        VARCHAR2(50 CHAR) NOT NULL,
    address      VARCHAR2(50 CHAR),
    details      VARCHAR2(400 CHAR)
);

ALTER TABLE partner ADD CONSTRAINT partner_pk PRIMARY KEY ( partner_id );

CREATE TABLE partner_service (
    partner_service_id   NUMBER NOT NULL,
    partner_id           NUMBER NOT NULL,
    service_id           NUMBER NOT NULL
);

ALTER TABLE partner_service ADD CONSTRAINT partner_service_pk PRIMARY KEY ( partner_service_id );

CREATE TABLE payment_type (
    payment_type_id     NUMBER NOT NULL,
    payment_type_name   VARCHAR2(25 CHAR) NOT NULL
);

ALTER TABLE payment_type ADD CONSTRAINT payment_type_pk PRIMARY KEY ( payment_type_id );

CREATE TABLE photoagency_service (
    service_id       NUMBER NOT NULL,
    photo_included   CHAR(1) NOT NULL,
    video_included   CHAR(1) NOT NULL,
    photo_type       VARCHAR2(50),
    video_type       VARCHAR2(50 CHAR),
    video_editing    CHAR(1),
    photo_editing    CHAR(1),
    drone_included   CHAR(1)
);

ALTER TABLE photoagency_service ADD CONSTRAINT photoagency_service_pk PRIMARY KEY ( service_id );

CREATE TABLE position (
    position_id      NUMBER NOT NULL,
    position_title   VARCHAR2(25 CHAR) NOT NULL,
    min_salary       NUMBER NOT NULL,
    max_salary       NUMBER
);

ALTER TABLE position ADD CONSTRAINT position_pk PRIMARY KEY ( position_id );

CREATE TABLE position_history (
    position_history_id   NUMBER NOT NULL,
    start_date            DATE NOT NULL,
    end_date              DATE,
    position_id           NUMBER NOT NULL,
    employee_id           NUMBER NOT NULL
);

ALTER TABLE position_history ADD CONSTRAINT position_history_pk PRIMARY KEY ( position_history_id );

CREATE TABLE region (
    region_id     NUMBER NOT NULL,
    region_name   VARCHAR2(50 CHAR) NOT NULL
);

ALTER TABLE region ADD CONSTRAINT region_pk PRIMARY KEY ( region_id );

CREATE TABLE service (
    service_id   NUMBER NOT NULL,
    type         VARCHAR2(20 CHAR) NOT NULL
);

ALTER TABLE service ADD CONSTRAINT service_pk PRIMARY KEY ( service_id );

CREATE TABLE training (
    training_id   NUMBER NOT NULL,
    start_date    DATE NOT NULL,
    end_date      DATE NOT NULL,
    title         VARCHAR2(50) NOT NULL,
    description   VARCHAR2(500)
);

ALTER TABLE training ADD CONSTRAINT training_pk PRIMARY KEY ( training_id );

CREATE TABLE transportation_service (
    service_id                NUMBER NOT NULL,
    passanger_capacity        NUMBER NOT NULL,
    priority_class_included   CHAR(1)
);

ALTER TABLE transportation_service ADD CONSTRAINT transportation_service_pk PRIMARY KEY ( service_id );

CREATE TABLE unit_event (
    unit_event_id     NUMBER NOT NULL,
    start_date_time   DATE NOT NULL,
    end_date_time     DATE NOT NULL,
    location          VARCHAR2(100 CHAR) NOT NULL,
    event_id          NUMBER NOT NULL
);

ALTER TABLE unit_event ADD CONSTRAINT unit_event_pk PRIMARY KEY ( unit_event_id );

CREATE TABLE unit_event_equipment (
    unit_event_id     NUMBER NOT NULL,
    equipment_id      NUMBER NOT NULL,
    equipment_count   NUMBER(15) NOT NULL
);

ALTER TABLE unit_event_equipment ADD CONSTRAINT relation_26_pk PRIMARY KEY ( unit_event_id,
                                                                             equipment_id );

CREATE TABLE venue_service (
    service_id           NUMBER NOT NULL,
    square_meters        NUMBER(*, 2) NOT NULL,
    design_included      CHAR(1),
    max_guest_capacity   NUMBER,
    min_guest_capacity   NUMBER,
    crew_included        CHAR(1)
);

ALTER TABLE venue_service ADD CONSTRAINT venue_service_pk PRIMARY KEY ( service_id );

CREATE TABLE volunteer (
    volunteer_id   NUMBER NOT NULL,
    first_name     VARCHAR2(25 CHAR) NOT NULL,
    last_name      VARCHAR2(25 CHAR) NOT NULL,
    organization   VARCHAR2(25 CHAR),
    phone_number   NUMBER NOT NULL,
    email          VARCHAR2(25 CHAR)
);

ALTER TABLE volunteer ADD CONSTRAINT volunteer_pk PRIMARY KEY ( volunteer_id );

ALTER TABLE branch_department
    ADD CONSTRAINT bd_branch_fk FOREIGN KEY ( branch_id )
        REFERENCES branch ( branch_id );

ALTER TABLE branch_department
    ADD CONSTRAINT bd_department_fk FOREIGN KEY ( department_id )
        REFERENCES department ( department_id );

ALTER TABLE branch
    ADD CONSTRAINT branch_region_fk FOREIGN KEY ( region_id )
        REFERENCES region ( region_id );

ALTER TABLE customer_individual
    ADD CONSTRAINT cust_indiv_customer_fk FOREIGN KEY ( customer_id )
        REFERENCES customer ( customer_id );

ALTER TABLE customer_company
    ADD CONSTRAINT customer_company_customer_fk FOREIGN KEY ( customer_id )
        REFERENCES customer ( customer_id );

ALTER TABLE dependent
    ADD CONSTRAINT dependent_employee_fk FOREIGN KEY ( employee_id )
        REFERENCES employee ( employee_id );

ALTER TABLE equipment_inventory
    ADD CONSTRAINT ei_equipment_fk FOREIGN KEY ( equipment_id )
        REFERENCES equipment ( equipment_id );

ALTER TABLE equipment_inventory
    ADD CONSTRAINT ei_inventory_fk FOREIGN KEY ( inventory_id )
        REFERENCES inventory ( inventory_id );

ALTER TABLE employee
    ADD CONSTRAINT employee_branch_fk FOREIGN KEY ( branch_id )
        REFERENCES branch ( branch_id );

ALTER TABLE employee
    ADD CONSTRAINT employee_department_fk FOREIGN KEY ( department_id )
        REFERENCES department ( department_id );

ALTER TABLE employee
    ADD CONSTRAINT employee_position_fk FOREIGN KEY ( position_id )
        REFERENCES position ( position_id );

ALTER TABLE employee_training
    ADD CONSTRAINT employee_training_employee_fk FOREIGN KEY ( employee_id )
        REFERENCES employee ( employee_id );

ALTER TABLE employee_training
    ADD CONSTRAINT employee_training_training_fk FOREIGN KEY ( training_id )
        REFERENCES training ( training_id );

ALTER TABLE entertainment_service
    ADD CONSTRAINT entertain_service_fk FOREIGN KEY ( service_id )
        REFERENCES service ( service_id );

ALTER TABLE equipment
    ADD CONSTRAINT equipment_equipment_type_fk FOREIGN KEY ( equipment_type_id )
        REFERENCES equipment_type ( equipment_type_id );

ALTER TABLE event_service_record
    ADD CONSTRAINT es_event_fk FOREIGN KEY ( event_id )
        REFERENCES event ( event_id );

ALTER TABLE event_service_record
    ADD CONSTRAINT esr_partner_service_fk FOREIGN KEY ( partner_srv_id )
        REFERENCES partner_service ( partner_service_id );

ALTER TABLE event_employee
    ADD CONSTRAINT event_employee_employee_fk FOREIGN KEY ( employee_id )
        REFERENCES employee ( employee_id );

ALTER TABLE event_employee
    ADD CONSTRAINT event_employee_event_fk FOREIGN KEY ( event_id )
        REFERENCES event ( event_id );

ALTER TABLE event
    ADD CONSTRAINT event_event_type_fk FOREIGN KEY ( event_type_id )
        REFERENCES event_type ( event_type_id );

ALTER TABLE event_volunteer
    ADD CONSTRAINT event_volunteer_event_fk FOREIGN KEY ( event_id )
        REFERENCES event ( event_id );

ALTER TABLE event_volunteer
    ADD CONSTRAINT event_volunteer_volunteer_fk FOREIGN KEY ( volunteer_id )
        REFERENCES volunteer ( volunteer_id );

ALTER TABLE food_service
    ADD CONSTRAINT food_service_service_fk FOREIGN KEY ( service_id )
        REFERENCES service ( service_id );

ALTER TABLE generic_service
    ADD CONSTRAINT generic_service_service_fk FOREIGN KEY ( service_id )
        REFERENCES service ( service_id );

ALTER TABLE guest
    ADD CONSTRAINT guest_event_fk FOREIGN KEY ( event_id )
        REFERENCES event ( event_id );

ALTER TABLE guest
    ADD CONSTRAINT guest_guest_address_fk FOREIGN KEY ( guest_address_id )
        REFERENCES guest_address ( guest_address_id );

ALTER TABLE music_service
    ADD CONSTRAINT music_service_service_fk FOREIGN KEY ( service_id )
        REFERENCES service ( service_id );

ALTER TABLE event_order
    ADD CONSTRAINT order_customer_fk FOREIGN KEY ( customer_id )
        REFERENCES customer ( customer_id );

ALTER TABLE event_order
    ADD CONSTRAINT order_event_fk FOREIGN KEY ( event_event_id )
        REFERENCES event ( event_id );

ALTER TABLE event_order
    ADD CONSTRAINT order_payment_type_fk FOREIGN KEY ( payment_type_id )
        REFERENCES payment_type ( payment_type_id );

ALTER TABLE partner_service
    ADD CONSTRAINT partner_service_partner_fk FOREIGN KEY ( partner_id )
        REFERENCES partner ( partner_id );

ALTER TABLE partner_service
    ADD CONSTRAINT partner_service_service_fk FOREIGN KEY ( service_id )
        REFERENCES service ( service_id );

ALTER TABLE photoagency_service
    ADD CONSTRAINT photoagency_service_service_fk FOREIGN KEY ( service_id )
        REFERENCES service ( service_id );

ALTER TABLE position_history
    ADD CONSTRAINT position_history_employee_fk FOREIGN KEY ( employee_id )
        REFERENCES employee ( employee_id );

ALTER TABLE position_history
    ADD CONSTRAINT position_history_position_fk FOREIGN KEY ( position_id )
        REFERENCES position ( position_id );

ALTER TABLE unit_event_equipment
    ADD CONSTRAINT relation_26_equipment_fk FOREIGN KEY ( equipment_id )
        REFERENCES equipment ( equipment_id );

ALTER TABLE unit_event_equipment
    ADD CONSTRAINT relation_26_unit_event_fk FOREIGN KEY ( unit_event_id )
        REFERENCES unit_event ( unit_event_id );

ALTER TABLE transportation_service
    ADD CONSTRAINT transport_service_fk FOREIGN KEY ( service_id )
        REFERENCES service ( service_id );

ALTER TABLE unit_event
    ADD CONSTRAINT unit_event_event_fk FOREIGN KEY ( event_id )
        REFERENCES event ( event_id );

ALTER TABLE venue_service
    ADD CONSTRAINT venue_service_service_fk FOREIGN KEY ( service_id )
        REFERENCES service ( service_id );

CREATE OR REPLACE TRIGGER arc_fkarc__photoagency_service BEFORE
    INSERT OR UPDATE OF service_id ON photoagency_service
    FOR EACH ROW
DECLARE
    d VARCHAR2(20 CHAR);
BEGIN
    SELECT
        a.type
    INTO d
    FROM
        service a
    WHERE
        a.service_id = :new.service_id;

    IF ( d IS NULL OR d <> 'phot' ) THEN
        raise_application_error(-20223, 'FK PHOTOAGENCY_SERVICE_SERVICE_FK in Table PHOTOAGENCY_SERVICE violates Arc constraint on Table SERVICE - discriminator column type doesn''t have value ''phot'''
        );
    END IF;

EXCEPTION
    WHEN no_data_found THEN
        NULL;
    WHEN OTHERS THEN
        RAISE;
END;
/

CREATE OR REPLACE TRIGGER arc_fkar_entertainment_service BEFORE
    INSERT OR UPDATE OF service_id ON entertainment_service
    FOR EACH ROW
DECLARE
    d VARCHAR2(20 CHAR);
BEGIN
    SELECT
        a.type
    INTO d
    FROM
        service a
    WHERE
        a.service_id = :new.service_id;

    IF ( d IS NULL OR d <> 'entm' ) THEN
        raise_application_error(-20223, 'FK ENTERTAIN_SERVICE_FK in Table ENTERTAINMENT_SERVICE violates Arc constraint on Table SERVICE - discriminator column type doesn''t have value ''entm'''
        );
    END IF;

EXCEPTION
    WHEN no_data_found THEN
        NULL;
    WHEN OTHERS THEN
        RAISE;
END;
/

CREATE OR REPLACE TRIGGER arc_fkarc_1_music_service BEFORE
    INSERT OR UPDATE OF service_id ON music_service
    FOR EACH ROW
DECLARE
    d VARCHAR2(20 CHAR);
BEGIN
    SELECT
        a.type
    INTO d
    FROM
        service a
    WHERE
        a.service_id = :new.service_id;

    IF ( d IS NULL OR d <> 'music' ) THEN
        raise_application_error(-20223, 'FK MUSIC_SERVICE_SERVICE_FK in Table MUSIC_SERVICE violates Arc constraint on Table SERVICE - discriminator column type doesn''t have value ''music'''
        );
    END IF;

EXCEPTION
    WHEN no_data_found THEN
        NULL;
    WHEN OTHERS THEN
        RAISE;
END;
/

CREATE OR REPLACE TRIGGER arc_fka_transportation_service BEFORE
    INSERT OR UPDATE OF service_id ON transportation_service
    FOR EACH ROW
DECLARE
    d VARCHAR2(20 CHAR);
BEGIN
    SELECT
        a.type
    INTO d
    FROM
        service a
    WHERE
        a.service_id = :new.service_id;

    IF ( d IS NULL OR d <> 'trnsp' ) THEN
        raise_application_error(-20223, 'FK TRANSPORT_SERVICE_FK in Table TRANSPORTATION_SERVICE violates Arc constraint on Table SERVICE - discriminator column type doesn''t have value ''trnsp'''
        );
    END IF;

EXCEPTION
    WHEN no_data_found THEN
        NULL;
    WHEN OTHERS THEN
        RAISE;
END;
/

CREATE OR REPLACE TRIGGER arc_fkarc_1_venue_service BEFORE
    INSERT OR UPDATE OF service_id ON venue_service
    FOR EACH ROW
DECLARE
    d VARCHAR2(20 CHAR);
BEGIN
    SELECT
        a.type
    INTO d
    FROM
        service a
    WHERE
        a.service_id = :new.service_id;

    IF ( d IS NULL OR d <> 'venue' ) THEN
        raise_application_error(-20223, 'FK VENUE_SERVICE_SERVICE_FK in Table VENUE_SERVICE violates Arc constraint on Table SERVICE - discriminator column type doesn''t have value ''venue'''
        );
    END IF;

EXCEPTION
    WHEN no_data_found THEN
        NULL;
    WHEN OTHERS THEN
        RAISE;
END;
/

CREATE OR REPLACE TRIGGER arc_fkarc_1_food_service BEFORE
    INSERT OR UPDATE OF service_id ON food_service
    FOR EACH ROW
DECLARE
    d VARCHAR2(20 CHAR);
BEGIN
    SELECT
        a.type
    INTO d
    FROM
        service a
    WHERE
        a.service_id = :new.service_id;

    IF ( d IS NULL OR d <> 'food' ) THEN
        raise_application_error(-20223, 'FK FOOD_SERVICE_SERVICE_FK in Table FOOD_SERVICE violates Arc constraint on Table SERVICE - discriminator column type doesn''t have value ''food'''
        );
    END IF;

EXCEPTION
    WHEN no_data_found THEN
        NULL;
    WHEN OTHERS THEN
        RAISE;
END;
/

CREATE OR REPLACE TRIGGER arc_fkarc_1_generic_service BEFORE
    INSERT OR UPDATE OF service_id ON generic_service
    FOR EACH ROW
DECLARE
    d VARCHAR2(20 CHAR);
BEGIN
    SELECT
        a.type
    INTO d
    FROM
        service a
    WHERE
        a.service_id = :new.service_id;

    IF ( d IS NULL OR d <> 'gener' ) THEN
        raise_application_error(-20223, 'FK GENERIC_SERVICE_SERVICE_FK in Table GENERIC_SERVICE violates Arc constraint on Table SERVICE - discriminator column type doesn''t have value ''gener'''
        );
    END IF;

EXCEPTION
    WHEN no_data_found THEN
        NULL;
    WHEN OTHERS THEN
        RAISE;
END;
/



-- Oracle SQL Developer Data Modeler Summary Report: 
-- 
-- CREATE TABLE                            39
-- CREATE INDEX                             2
-- ALTER TABLE                             78
-- CREATE VIEW                              0
-- ALTER VIEW                               0
-- CREATE PACKAGE                           0
-- CREATE PACKAGE BODY                      0
-- CREATE PROCEDURE                         0
-- CREATE FUNCTION                          0
-- CREATE TRIGGER                           7
-- ALTER TRIGGER                            0
-- CREATE COLLECTION TYPE                   0
-- CREATE STRUCTURED TYPE                   0
-- CREATE STRUCTURED TYPE BODY              0
-- CREATE CLUSTER                           0
-- CREATE CONTEXT                           0
-- CREATE DATABASE                          0
-- CREATE DIMENSION                         0
-- CREATE DIRECTORY                         0
-- CREATE DISK GROUP                        0
-- CREATE ROLE                              0
-- CREATE ROLLBACK SEGMENT                  0
-- CREATE SEQUENCE                          0
-- CREATE MATERIALIZED VIEW                 0
-- CREATE MATERIALIZED VIEW LOG             0
-- CREATE SYNONYM                           0
-- CREATE TABLESPACE                        0
-- CREATE USER                              0
-- 
-- DROP TABLESPACE                          0
-- DROP DATABASE                            0
-- 
-- REDACTION POLICY                         0
-- 
-- ORDS DROP SCHEMA                         0
-- ORDS ENABLE SCHEMA                       0
-- ORDS ENABLE OBJECT                       0
-- 
-- ERRORS                                   0
-- WARNINGS                                 0
